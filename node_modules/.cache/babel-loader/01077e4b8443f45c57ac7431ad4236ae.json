{"ast":null,"code":"var _jsxFileName = \"/Users/siarhei/Documents/GitHub/react_study/src/Main/TodoList.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = props => {\n  _s();\n\n  // constructor(props) {\n  //   super(props);\n  // create state only in constructor\n  // initial state\n  const [valueInput, setValueInput] = useState('');\n  const [listTodo, setListTodo] = useState([]);\n\n  const updateInput = e => {\n    e.preventDefault(); //update react state\n\n    setValueInput(e.target.value);\n  };\n\n  const addItem = e => {\n    e.preventDefault();\n    if (valueInput === '') return alert('Need enter TODO task'); //create item task with unique id\n\n    setListTodo([...listTodo, {\n      id: 1 + Math.random(),\n      value: valueInput.slice(),\n      completed: false\n    }]); // return epmty input\n\n    setValueInput('');\n  };\n\n  const deleteItem = id => {\n    //copy current list of items\n    // const listTodo = [...listTodo];\n    //filter out item being deleted\n    const updatedListTodo = listTodo.filter(valueInput => valueInput.id !== id);\n    setListTodo({\n      listTodo: updatedListTodo\n    });\n  };\n\n  const toggleTodo = id => {\n    const updatedListTodo = listTodo.map(valueInput => {\n      return valueInput.id === id ? { ...valueInput,\n        completed: !valueInput.completed\n      } : valueInput;\n    });\n    setListTodo(updatedListTodo);\n  }; // const handleFilter = () => {\n  //   let filtered = toDoList.filter(task => {\n  //     return !task.complete;\n  //   });\n  //   setToDoList(filtered);\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TODO or NOT TODO\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"TODO's LIST\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Type your TODO here...\",\n          onChange: updateInput,\n          value: valueInput\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          onClick: addItem,\n          children: \"Add TODO\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: listTodo.map(valueInput => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: valueInput.completed ? 'todo-completed' : undefined,\n              onClick: () => toggleTodo(valueInput.id),\n              children: valueInput.value\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              // onClick={handleChangeTextColor}\n              // onChange={handleChangeStyleText}\n              className: \"switch\",\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"checkbox\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 102,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deleteItem(valueInput.id),\n                children: \"X\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this)]\n          }, valueInput.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"34vaHN42Yc4Fw2R77ysEkiHpQyU=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/siarhei/Documents/GitHub/react_study/src/Main/TodoList.jsx"],"names":["React","useState","App","props","valueInput","setValueInput","listTodo","setListTodo","updateInput","e","preventDefault","target","value","addItem","alert","id","Math","random","slice","completed","deleteItem","updatedListTodo","filter","toggleTodo","map","undefined"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport './styles.css';\n\nconst App = (props) => {\n  // constructor(props) {\n  //   super(props);\n\n  // create state only in constructor\n  // initial state\n  const [valueInput, setValueInput] = useState('');\n  const [listTodo, setListTodo] = useState([]);\n\n  const updateInput = (e) => {\n    e.preventDefault();\n    //update react state\n    setValueInput(e.target.value);\n  };\n\n  const addItem = (e) => {\n    e.preventDefault();\n    if (valueInput === '') return alert('Need enter TODO task');\n    //create item task with unique id\n    setListTodo([\n      ...listTodo,\n      {\n        id: 1 + Math.random(),\n        value: valueInput.slice(),\n        completed: false,\n      },\n    ]);\n    // return epmty input\n    setValueInput('');\n  };\n\n  const deleteItem = (id) => {\n    //copy current list of items\n    // const listTodo = [...listTodo];\n\n    //filter out item being deleted\n    const updatedListTodo = listTodo.filter(\n      (valueInput) => valueInput.id !== id\n    );\n\n    setListTodo({ listTodo: updatedListTodo });\n  };\n\n  const toggleTodo = (id) => {\n    const updatedListTodo = listTodo.map((valueInput) => {\n      return valueInput.id === id\n        ? { ...valueInput, completed: !valueInput.completed }\n        : valueInput;\n    });\n    setListTodo(updatedListTodo);\n  };\n\n  // const handleFilter = () => {\n  //   let filtered = toDoList.filter(task => {\n  //     return !task.complete;\n  //   });\n  //   setToDoList(filtered);\n  // }\n\n  return (\n    <div className=\"container\">\n      {/* {TodoListCss.TodoList} */}\n\n      <h1>TODO or NOT TODO</h1>\n\n      <div>\n        TODO's LIST\n        <br />\n        <form>\n          <input\n            type=\"text\"\n            placeholder=\"Type your TODO here...\"\n            onChange={updateInput}\n            value={valueInput}\n          />\n\n          <button type=\"submit\" onClick={addItem}>\n            Add TODO\n          </button>\n        </form>\n        <div>\n          <ul>\n            {listTodo.map((valueInput) => (\n              <li key={valueInput.id}>\n                <span\n                  className={\n                    valueInput.completed ? 'todo-completed' : undefined\n                  }\n                  onClick={() => toggleTodo(valueInput.id)}\n                >\n                  {valueInput.value}\n                </span>\n\n                <span\n                  // onClick={handleChangeTextColor}\n                  // onChange={handleChangeStyleText}\n                  className=\"switch\"\n                >\n                  <input type=\"checkbox\" />\n                </span>\n\n                <span>\n                  <button onClick={() => deleteItem(valueInput.id)}>X</button>\n                </span>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <br />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}